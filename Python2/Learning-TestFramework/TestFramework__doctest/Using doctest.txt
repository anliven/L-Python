# -*- coding: utf-8 -*-
__author__ = 'guowli'

# ----------------------------------------------------------------------------------------------------------------------

# doctest
# Python自带的简单自动化测试工具，是基于文档的测试，用于检查文档，也可用于简单一点的单元测试
# 文档格式要求：简单的说就是测试用例都要和python交互方式下的输入输出一致，而其他格式的文字可以当作是注释。

# doctest常见使用doctest的方式：
#   通过检测所有的文档中的交互式例子输出正常来检查一个模块的文档字符串为最新的。
#   通过验证来自测试文件或者测试对象的交互式例子的输出像预期一样来执行回归测试。
#   为一个包编写教程文档，逐字地用输入-输出例子来说明。

# 更多内容请查看
Python documentation » The Python Standard Library » Development Tools » doctest — Test interactive Python examples

# ----------------------------------------------------------------------------------------------------------------------

### 简单举例

doctest使用Python object的__doc__来记录对应module、class、method测试的测试用例。
doctest的书写形式就是在python CLI中交互执行程序时输入输出的形式。

# 一个python文件 func.py 里面有如下内容：
def func(arg):
    print arg

# 对于这样一个method，在python CLI下交互执行的输入输出过程如下
>>> def func(arg):
...     print arg;
...
>>>
>>> func(1)  # 这是输入
1  # 这是输出
>>>

# 使用doctest来写一个TestCase，就是直接把上面的输入输出执行过程写进func的__doc__里面。
# 创建一个python文件 test_func.py 并添加如下内容：
def func(arg):
     """TestCase for fun
     >>> func(1)
     1
     """
     print arg
if __name__ == "__main__":
    import doctest
    doctest.testmod()
# 在当前目录命令行下执行 python test_func.py，__doc__里面以>>> 开始的代码会被执行，并检查执行的输出。
# python test_func.py -v，加上参数-v，则会在打印出每个尝试的细节日志，并在最后给出一个统计概要。
# 测试过程： func(1)会被执行，而执行的返回值会用来于1作比较，等于1则TestCase通过，否则是就这个TestCase没过。
# 将输出的“1”改为其他数值，再执行测试将无法通过，并会给出报错信息。

# Python2.6之后，可以直接在命令行敲上命令运行testmod()来检测，在这里可以不需要if语句部分了，直接执行如下语句即可：
# python -m doctest -v test_func.py

# ----------------------------------------------------------------------------------------------------------------------

# 将写在doctest中的内容合理编排，说明和测试用例的层次区分清晰，将有助于快速理解。
# 只要格式正确，doctest几乎支持可以在Python CLI下敲的一切。也就是说，在CLI调试时的内容可以直接贴进去当测试用例。
# 对于单元测试把测试用例和代码放在一起，对于测试和修改都是有好处的。
# 写在doctest中的测试用例应该是足够”短小精悍“的，适用于简单的测试过程，详细的测试还是用unittest或者nose吧。

# 总结：doctest的好处在于写代码的同时就写下了测试代码，而且又是很好的注释，但适用于简单的测试过程。

# ----------------------------------------------------------------------------------------------------------------------

### 另一个例子

# 待测试代码
def square(x):
    return x*x

# 代码、说明和测试用例
def square(x):
    '''''
    Squares a number and returns the results.
    >>> square(2)
    4
    >>> square(3)
    9
    '''
    return x*x

# ----------------------------------------------------------------------------------------------------------------------
