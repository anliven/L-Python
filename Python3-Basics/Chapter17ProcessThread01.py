#! python3
# -*- coding: utf-8 -*-

# ### 多任务
# 对于单核CPU，操作系统轮流让各个任务交替执行，由于CPU的执行速度极快，感觉就像所有任务都在同时执行一样；
# 对于多核CPU，能够真正并行执行多任务，如果任务数量远远多于CPU核心数量，操作系统也会自动把很多任务轮流调度到每个核心上执行；
#
# ### 进程（Process）与线程（Thread）
# 对于操作系统来说，一个任务就是一个进程（Process）；
# 在一个进程内部，可以同时做多件事，同时运行多个“子任务”，进程内的这些“子任务”称为线程（Thread）；
# 由于每个进程至少要干一件事，所以一个进程至少由一个线程组成，线程是最小的执行单元；
# 进程可以有多个线程同时执行，由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样；
# 真正地同时执行多线程需要多核CPU才可能实现；
# 进程和线程的调度完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间；
#
# ### 同时执行多个任务
# 方案1：多进程模式（启动多个进程，每个进程只有一个线程，多个进程可以同时执行多个任务；）
# 方案2：多线程模式（启动一个进程，在此进程内启动多个线程，同时执行多个任务；）
# 方案3: 多进程+多线程模式（启动多个进程，每个进程再启动多个线程，同时执行多个任务，但这种模型更复杂，实际很少采用；）
#
# ### 对比多进程模式与多线程模式
# 多进程模式
# - 优点：稳定性高，一个子进程的崩溃不会影响主进程和其他子进程；
# - 缺点：创建进程的代价大，在内存和CPU的限制下，难以管理和调度大量进程；
# 多线程模式
# - 优点：比多进程有效率，但提升有限；
# - 缺点：稳定性差，任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存；
#
# ### 注意
# 通常同时执行的多个任务之间需要相互通信和协调，要考虑同步、数据共享的问题；
# 多进程和多线程的程序，通常复杂度高，编写和调试困难；
#
# ### Master-Worker模式
# 实现多任务，通常会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，通常是一个Master和多个Worker；
#
# ### 任务切换
# 如果大量任务同时进行，可能会消耗大量系统资源来切换任务，无法真正执行任务，导致系统处于假死状态、程序无反应等；
# 使用多进程或多线程来实现多任务，都有数量的限制，以避免消耗掉系统所有的资源，防止导致效率急剧下降；
#
# ### 任务类型
# 计算密集型任务: 进行大量计算，主要消耗CPU资源；代码运行效率至关重要，脚本语言不适合；
# IO密集型: 涉及网络、磁盘IO，CPU消耗很少，任务的大部分时间都在等待IO操作完成；常见的大部分任务都是IO密集型任务，脚本语言是首选；
